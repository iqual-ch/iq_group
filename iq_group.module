<?php

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\iq_group\Controller\UserController;
use Drupal\node\Entity\Node;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\iq_group\IqGroupEvents;
use Drupal\iq_group\Event\IqGroupEvent;
use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iq_group_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['account']['name']['#type'] = 'hidden';
  $form['account']['name']['#required'] = FALSE;
  $form['actions']['submit']['#submit'][] = 'iq_group_after_register';
  $form['#validate'][] = 'iq_group_register_validation';
  $form['#validate'] = array_reverse($form['#validate']);
  //var_dump($form['#validate']);
  //var_dump(array_keys($form['account']));
  //die();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iq_group_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser()->getAccount();
  // If user is subscriber, redirect him to the user edit form.
  $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
  if (!empty($group)) {
    $group_role_storage = \Drupal::entityTypeManager()
      ->getStorage('group_role');
    $groupRoles = $group_role_storage->loadByUserAndGroup($user, $group);
    $groupRoles = array_keys($groupRoles);
    if (in_array('subscription-subscriber', $groupRoles)) {
      header("Location:/user/edit");
    }
  }
  $form['language']['#type'] = 'markup';
  $form['account']['name']['#type'] = 'hidden';
  $form['account']['mail']['#description'] = '';
  //$form['actions']['submit']['#submit'][] = 'iq_group_after_register';
  foreach ($form['field_iq_group_preferences']['widget']['#options'] as $key => $value) {
    if (reset($value) == 'General') {
      unset($form['field_iq_group_preferences']['widget']['#options'][$key]);
    }
  }

}

function iq_group_register_validation(&$form, FormStateInterface $form_state) {
  $form_state->setValue('name', $form_state->getValue('mail'));
  $form['account']['name']['#value'] = $form_state->getValue('mail');
}

/**
 * Additional submit function after user register.
 */
function iq_group_after_register(&$form, FormStateInterface $form_state) {
  // email exists
  $mail = $form_state->getValue('mail');
  @$user = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
    'mail' => $mail
  ]);
  /** @var \Drupal\user\Entity\User $user */
  $user = reset($user);

  if ($user != FALSE) {
    $iqGroupSettingsConfig = \Drupal::config('iq_group.settings');
    $email_name = $iqGroupSettingsConfig->get('name') != NULL ? $iqGroupSettingsConfig->get('name') : 'Iqual';
    $email_from = $iqGroupSettingsConfig->get('from') != NULL ? $iqGroupSettingsConfig->get('from') : 'support@iqual.ch';
    $email_reply_to = $iqGroupSettingsConfig->get('reply_to') != NULL ? $iqGroupSettingsConfig->get('reply_to') : 'support@iqual.ch';
    if ($form_state->getValue('pass') != NULL) {
      if ($user->field_iq_group_user_token->value == NULL) {
        $data = time();
        $data .= $user->id();
        $data .= $user->getEmail();
        $hash_token =  Crypt::hmacBase64($data, Settings::getHashSalt() . $user->getPassword());
        $user->set('field_iq_group_user_token', $hash_token);
      }
      // Add the role in general (id=5) group.
      $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
      if (!empty($group)) {
        $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
        $groupRoles = $group_role_storage->loadByUserAndGroup($user, $group);
        $groupRoles = array_keys($groupRoles);
        if (!in_array('subscription-lead', $groupRoles)) {
          UserController::addGroupRoleToUser($group, $user, 'subscription-lead');
          $eventDispatcher = \Drupal::service('event_dispatcher');
          $eventDispatcher->dispatch(IqGroupEvents::USER_PROFILE_EDIT, new IqGroupEvent($user));
        }
      }

      // Add member to the other groups that the user has selected in the
      // preferences field.
      $groups = $form_state->getValue('preferences');
      if ($groups != NULL && !empty($groups)) {
        foreach ($groups as $key => $otherGroup) {
          $otherGroup = Group::load($otherGroup);
          if ($otherGroup != NULL)
            UserController::addGroupRoleToUser($otherGroup, $user, 'subscription-lead');
        }
      }
    }
    \Drupal::messenger()->deleteByType(\Drupal\Core\Messenger\MessengerInterface::TYPE_STATUS);
    \Drupal::messenger()->addMessage('Besten Dank für die Registrierung. Sie erhalten in Kürze von uns eine E-Mail mit einem Bestätigungslink.');
    if ($form_state->getValue('destination') != "")  {
      $destination = $form_state->getValue('destination');
    }
    else {
      // @todo Set a destination if it is a signup form or not?
      //$destination = \Drupal\Core\Url::fromRoute('<current>')->toString();
    }
    $url = 'https://' . UserController::getDomain() . '/auth/' . $user->id() . '/' . $user->field_iq_group_user_token->value;
    if (isset($destination) && $destination != NULL) {
      $url .= "?destination=" . $destination;
    }
    $project_name = $iqGroupSettingsConfig->get('project_name') != NULL ? $iqGroupSettingsConfig->get('project_name') : "";
    $renderable = [
      '#theme' => 'register_template',
      '#EMAIL_TITLE' => 'Registrierung Benutzerkonto ' . $project_name,
      '#EMAIL_PREVIEW_TEXT' => 'Registrierung Benutzerkonto ' . $project_name,
      '#EMAIL_URL' => $url,
      '#EMAIL_PROJECT_NAME' => $project_name,
    ];
    $rendered = \Drupal::service('renderer')->renderPlain($renderable);
    $mail_subject = t("Registrierung Benutzerkonto " . $project_name);
    mb_internal_encoding("UTF-8");
    $mail_subject  = mb_encode_mimeheader($mail_subject,'UTF-8','Q');
    // Send a registration email and set the pending activation flag.
    $result = mail($user->getEmail(), $mail_subject , $rendered,
      "From: ".$email_name ." <". $email_from .">". "\r\nReply-to: ". $email_reply_to . "\r\nContent-Type: text/html");
    $store = \Drupal::service('user.shared_tempstore')->get('iq_group.user_status');
    $store->set($user->id().'_pending_activation', true);
    $form_state->setRedirect('user.register');

  }


}

/**
 * Implements hook_user_login().
 */
function iq_group_user_login(\Drupal\user\UserInterface $account) {


  $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
  $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
  $groupRoles = $group_role_storage->loadByUserAndGroup($account, $group);
  $groupRoles = array_keys($groupRoles);
  if (in_array('subscription-lead', $groupRoles)) {
    // redirect to destination if there is 1
    if (isset($_GET['destination']) && $_GET['destination'] != NULL) {
      $destination = $_GET['destination'];
      header("Location:".$destination);
    }
    // if not, he will be redirect to the set default redirect from
    // iq group settings.
    else {
      $member_area = \Drupal::config('iq_group.settings')->get('default_redirection');
      $response = new RedirectResponse(Url::fromUserInput($member_area)->toString());
      $response->send();
    }
  }
  return ;

  if (in_array('subscription-subscriber', $groupRoles)) {
    // redirect to destination if there is 1
    if (isset($_GET['destination']) && $_GET['destination'] != NULL) {
      $destination = $_GET['destination'];
      header("Location:".$destination);
    }
    // if not, he will be redirect to the set default redirect from
    // iq group settings.
    else {
      header('Location:' . \Drupal::config('iq_group.settings')->get('default_redirection'));
    }
  }

}

function iq_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Disable cancel methods for non-admin users.
  if ($form_id == 'user_cancel_form' && \Drupal::currentUser()->id() != '1') {
      unset($form['user_cancel_method']['#options']['user_cancel_block_unpublish']);
      unset($form['user_cancel_method']['user_cancel_block_unpublish']);
      unset($form['user_cancel_method']['#options']['user_cancel_block']);
      unset($form['user_cancel_method']['user_cancel_block']);
      $form['user_cancel_method']['#default_value'] = 'user_cancel_reassign';

      // If needed, the description can be changed with the following text.
      $form['user_cancel_method']['#options']['user_cancel_reassign'] = t('Delete my account.');
      $form['user_cancel_method']['#title'] = t('Account deletion');
      unset($form['description']);
  }
  if ($form_id == 'iq_group_user_edit_form') {

  }
  if ($form_id == 'user_form' || $form_id == 'user_register_form' && !empty($form['user_picture'])) {
    $form['user_picture']['widget'][0]['#description'] = t('Available types: ') . str_replace(' ', ', ', trim(reset($form['user_picture']['widget'][0]['#upload_validators']['file_validate_extensions'])));
  }
  if ($form_id == 'user_register_form') {
    $termsAndConditions = \Drupal::config('iq_group.settings')->get('terms_and_conditions') ? \Drupal::config('iq_group.settings')->get('terms_and_conditions') : "https://www.sqs.ch/de/datenschutzbestimmungen";
    $form['data_privacy'] = [
      '#type' => 'checkbox',
      '#title' => t('I have read the <a href="@terms_and_conditions" target="_blank">terms and conditions</a> and data protection regulations and I agree.', ['@terms_and_conditions' => $termsAndConditions]),
      '#default_value' => false,
      '#required' => true,
      '#weight' => 10,
    ];
    // The submit callback should not be here. If everything is okay,
    // remove the comment on the next line.
    // $form['actions']['#submit'][] = '_node_field_group_add_custom_callback_group';
/*    $result = \Drupal::entityTypeManager()
      ->getStorage('group')
      ->loadMultiple();
    $options = [];
    foreach ($result as $key => $group) {
      $options[$group->id()] = $group->label();
    }
    $form['field_iq_group_preferences']['widget']['#options'] = $options;*/
  }
}

function iq_group_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $iqGroupSettingsConfig = \Drupal::config('iq_group.settings');
  $login_intro = $iqGroupSettingsConfig->get('login_intro') != NULL ? $iqGroupSettingsConfig->get('login_intro') : t('Welcome');
  $form['title'] = [
    '#type' => 'markup',
    '#markup' => "<h1>". $login_intro ."</h1>",
    '#weight' => -100
  ];
  $destination = '/user/register';
  if (!empty($_GET['destination'])) {
    $destination.='?destination=' . $_GET['destination'];
  }
  $form['forgot_password'] = [
    '#type' => 'markup',
    '#markup' => '<a href="/onetime-loginlink">'. t('Forgot password') . '</a> / ',
    '#weight' => 100
  ];
  $form['register_link'] = [
    '#type' => 'markup',
    '#markup' => '<a href="'. $destination .  '">' . t('Register') . '</a>',
    '#weight' => 100
  ];
}

/**
 * Implements hook_node_access().
 *
 */
function iq_group_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Some modules, including the code in \Drupal\node\NodeForm::access() may
  // check for 'view', 'update' or 'delete' access on new nodes, even though
  // that makes little sense. We need to account for it to avoid crashes because
  // we would otherwise query the DB with a non-existent node ID.
  if ($node->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_node:' . $node->bundle();

  // Load all of the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($node);

  // If the node does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }
  if ($op == 'view') {
    foreach ($groups as $group) {
      if ($node->isPublished()) {
        if ($group->hasPermission("view $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
        \Drupal::logger('gnode')->notice('yoo what');
        return AccessResult::allowed();
      }
      \Drupal::logger('gnode')->notice('allowed in group');
    }
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

function iq_group_theme($existing, $type, $theme, $path) {
  $text = '';
  return [
    'signup_template' => [
      'variables' => [
        'EMAIL_TITLE' => "Sign up",
        'EMAIL_PREVIEW_TEXT' => 'Newsletter Sign up',
        'EMAIL_URL' => $text,
        'EMAIL_PROJECT_NAME' => 'Project name',
        'USER_PREFERENCES' => []
      ],
    ],
    'login_template' => [
      'variables' => [
        'EMAIL_TITLE' => "Login",
        'EMAIL_PREVIEW_TEXT' => 'Login',
        'EMAIL_URL' => $text,
        'EMAIL_PROJECT_NAME' => 'Project name'
      ],
    ],
    'register_template' => [
      'variables' => [
        'EMAIL_TITLE' => "Registration",
        'EMAIL_PREVIEW_TEXT' => 'Registration',
        'EMAIL_URL' => $text,
        'EMAIL_PROJECT_NAME' => 'Project name'
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function iq_group_user_presave(\Drupal\user\UserInterface $account) {
  if (!$account->isNew()) {
    // $user = \Drupal\user\Entity\User::load($account->id());

    $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));

    if (!empty($group) && $group->getMember($account)) {
        $eventDispatcher = \Drupal::service('event_dispatcher');
        $eventDispatcher->dispatch(IqGroupEvents::USER_PROFILE_UPDATE, new IqGroupEvent($account));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function iq_group_user_predelete(\Drupal\user\UserInterface $account) {
  $user = \Drupal\user\Entity\User::load($account->id());

  $group = Group::load(\Drupal::config('iq_group.settings')
    ->get('general_group_id'));

  if (!empty($group) && $group->getMember($user)) {
    $eventDispatcher = \Drupal::service('event_dispatcher');
    $eventDispatcher->dispatch(IqGroupEvents::USER_PROFILE_DELETE, new IqGroupEvent($user));
  }
}

/**
 * Implements hook_page_attachments().
 */
function iq_group_page_attachments(array &$attachments)
{
  if (\Drupal::routeMatch()->getRouteName() == 'entity.user.canonical') {
    $attachments['#attached']['library'][] = 'ui_patterns/button_cta.button';
  }
}