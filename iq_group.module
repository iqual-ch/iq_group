<?php

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\file\FileInterface;
use Drupal\iq_group\Controller\UserController;
use Drupal\node\Entity\Node;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\iq_group\MauticEvents;
use Drupal\iq_group\Event\MauticEvent;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iq_group_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /*$form['account']['name']['#type'] = 'hidden';
  $form['account']['name']['#required'] = FALSE;*/
  $form['actions']['submit']['#submit'][] = 'iq_group_after_register';
  /*$form['#validate'][] = 'iq_group_register_validation';
  $form['#validate'] = array_reverse($form['#validate']);*/
}

function iq_group_form_node_iq_group_whitepaper_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /*var_dump($form['field_iq_group_whitepaper_file']['widget']);
  die();*/
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iq_group_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['language']['#type'] = 'markup';
  $form['actions']['submit']['#submit'][] = 'iq_group_after_register';
  foreach ($form['field_iq_group_preferences']['widget']['#options'] as $key => $value) {
    if (reset($value) == 'General') {
      unset($form['field_iq_group_preferences']['widget']['#options'][$key]);
    }
  }

}

function iq_group_register_validation(&$form, FormStateInterface $form_state) {
  $form['account']['name']['#value'] = $form_state->getValue('mail');
}
/**
 * Additional submit function after user register.
 */
function iq_group_after_register(&$form, FormStateInterface $form_state) {
  // email exists
  $mail = $form_state->getValue('mail');
  @$user = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
    'mail' => $mail
  ]);
  $user = reset($user);
  if ($user != FALSE) {
    if ($form_state->getValue('pass') != NULL) {
      if ($user->field_iq_group_user_token->value == NULL) {
        $data = time();
        $data .= $user->id();
        $data .= $user->getEmail();
        $hash_token =  Crypt::hmacBase64($data, Settings::getHashSalt() . $user->getPassword());
        $user->set('field_iq_group_user_token', $hash_token);
      }
      // Add the role in general (id=5) group.
      $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
      $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
      $groupRoles = $group_role_storage->loadByUserAndGroup($user, $group);
      $groupRoles = array_keys($groupRoles);
      if (!in_array('subscription-lead', $groupRoles)) {
        UserController::addGroupRoleToUser($group, $user, 'subscription-lead');
        $eventDispatcher = \Drupal::service('event_dispatcher');
        $eventDispatcher->dispatch(MauticEvents::USER_PROFILE_EDIT, new MauticEvent($user));
      }
      // Add member to the other groups that the user has selected in the
      // preferences field.
      $groups = $form_state->getValue('preferences');
      if ($groups != NULL && !empty($groups)) {
        foreach ($groups as $key => $otherGroup) {
          $otherGroup = Group::load($otherGroup);
          if ($otherGroup != NULL)
            UserController::addGroupRoleToUser($otherGroup, $user, 'subscription-lead');
        }
      }
    }
  }
}

/**
 * Implements hook_user_login().
 */
function iq_group_user_login(\Drupal\user\UserInterface $account) {

  $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
  $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
  $groupRoles = $group_role_storage->loadByUserAndGroup($account, $group);
  $groupRoles = array_keys($groupRoles);

  if (in_array('subscription-lead', $groupRoles)) {
    // redirect to destination if there is 1
    if (isset($_GET['destination']) && $_GET['destination'] != NULL) {
      $destination = $_GET['destination'];
      header("Location:".$destination);
    }
    // if not, he will be redirect to the set default redirect from
    // iq group settings.
    else {
      header('Location:' . \Drupal::config('iq_group.settings')->get('default_redirection'));
    }
  }
  return ;

  if (in_array('subscription-subscriber', $groupRoles)) {
    // redirect to destination if there is 1
    if (isset($_GET['destination']) && $_GET['destination'] != NULL) {
      $destination = $_GET['destination'];
      header("Location:".$destination);
    }
    // if not, he will be redirect to the set default redirect from
    // iq group settings.
    else {
      header('Location:' . \Drupal::config('iq_group.settings')->get('default_redirection'));
    }
  }

}

/**
 * Implements hook_file_access().
 */
function iq_group_file_access(FileInterface $file, $operation, AccountInterface $account) {
  // Block access to private file uploads for anonymous users.
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  if (\Drupal::currentUser()->isAnonymous()) {
    return AccessResult::forbidden();
  }
  else {
    $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
    $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
    $groupRoles = $group_role_storage->loadByUserAndGroup($user, $group);
    $groupRoles = array_keys($groupRoles);
    if (in_array('subscription-lead', $groupRoles) || in_array('subscription-subscriber', $groupRoles)) {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_file_download().
 */
function iq_group_file_download($uri) {
  /** @var \Drupal\file\Entity\File $file */
  $file = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $uri]);
  $file = reset($file);
  if ($file != NULL) {
    $whitepaper = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'type' => 'iq_group_whitepaper',
      'field_iq_group_whitepaper_file' => $file->id(),
    ]);
    $whitepaper = reset($whitepaper);
    if (isset($whitepaper) && $whitepaper->id() > 0)
    {
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      $existing_downloads = $user->get('field_iq_group_downloads')
        ->getValue();
      $downloads = [];
      if (!empty($existing_downloads)) {
        foreach ($existing_downloads as $key => $val) {
          if ($val['target_id'] != $whitepaper->id())
            $downloads[] = $val['target_id'];
        }
      }
      $downloads[] = $whitepaper->id();
      $user->set('field_iq_group_downloads', $downloads);
      $user->save();
      $eventDispatcher = \Drupal::service('event_dispatcher');
      $eventDispatcher->dispatch(MauticEvents::USER_DOWNLOAD_WHITEPAPER, new MauticEvent($user));
    }
  }
}

/**
 * Feature to create the group content on a node create/edit.
 */
/**
 * Get content types and field to act.
 */
function _node_field_group_settings() {
  $ctypes = [
    'iq_group_whitepaper',
  ];
  $add = $edit = array();
  foreach ($ctypes as $ctype) {
    $add[] = 'node_' . $ctype . '_form';
    $edit[] = 'node_' . $ctype . '_edit_form';
  }
  return [
    'form_id_add' => $add,
    'form_id_edit' => $edit,
    'group_field' => 'field_iq_group_node_group',
  ];
}


function iq_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['actions']['#submit'][] = '_node_field_group_add_custom_callback_group';
/*    $result = \Drupal::entityTypeManager()
      ->getStorage('group')
      ->loadMultiple();
    $options = [];
    foreach ($result as $key => $group) {
      $options[$group->id()] = $group->label();
    }
    $form['field_iq_group_preferences']['widget']['#options'] = $options;*/
  }
  $settings = _node_field_group_settings();
  // Add node.
  if (in_array($form_id, $settings['form_id_add'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_node_field_group_add_custom_callback_group';
      }
    }
  }

  // you need for the edit form a different callback because maybe you have to delete or create GroupContent
  if (in_array($form_id, $settings['form_id_edit'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_node_field_group_edit_custom_callback_group';
      }
    }
  }
}


function _node_field_group_add_custom_callback_group($form, FormStateInterface $form_state) {
  $settings = _node_field_group_settings();
  $nid = $form_state->getValue('nid');
  $node = Node::load($nid);
  $gids = $form_state->getValue($settings['group_field']);

  foreach ($gids as $gid) {
    // Skip -none- option
    if ($gid['target_id'] == '_none') {
      continue;
    }
    $group = Group::load($gid['target_id']);
    if ($group != NULL) {
      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
      $plugin = $group->getGroupType()->getContentPlugin('group_node:'.$node->bundle());
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $node->id(),
      ]);
      $group_content->save();
    }
  }

}

// This function is a bit more complex because you have to do some mathematical set operations
function _node_field_group_edit_custom_callback_group($form, FormStateInterface $form_state) {
  $settings = _node_field_group_settings();
  $nid = $form_state->getValue('nid');
  $node = Node::load($nid);

  // Index-Array for wanted groups ( gid => gid )
  $gids = $form_state->getValue($settings['group_field']);
  $gids_wanted = [];
  foreach ($gids as $gid) {
    $gids_wanted[$gid['target_id']] = $gid['target_id'];
  }

  // Index-Array for existing groups for this node gid => gid
  $gids_existing = [];

  // Index-Array for gnodes for easier deletion gid => GroupContent
  $gnodes_existing = [];

  /** @var \Drupal\group\Entity\Storage\GroupContentStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('group_content');
  // Loads all groups with a relation to the node
  $activGroupListEntity = $storage->loadByEntity($node);
  foreach ($activGroupListEntity as $groupContent) {
    // fill Index-Array with existing groups gid => gid
    $gids_existing[$groupContent->getGroup()->id()] = $groupContent->getGroup()->id();

    // fill Index-Array for existing gnodes
    $gnodes_existing[$groupContent->getGroup()->id()] = $groupContent;
  }

  // Union for existing and wanted groups
  $gids_union = $gids_existing + $gids_wanted;

  // Index-Array gnodes to create
  // = (Union for existing and wanted) minus existing
  $gids_create = array_diff($gids_union, $gids_existing);

  // Index-Array gnodes to delete
  // = (Union for existing and wanted) minus wanted
  $gids_delete = array_diff($gids_union, $gids_wanted);

  foreach ($gids_create as $gid) {
    // Skip -none- option
    if ($gid == '_none') {
      continue;
    }
    $group = Group::load($gid);
    if ($group != NULL) {
      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
      $plugin = $group->getGroupType()->getContentPlugin('group_node:'.$node->bundle());
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $node->id(),
      ]);
      $group_content->save();
    }
  }

  foreach ($gids_delete as $gid) {
    // Skip -none- option
    if ($gid == '_none') {
      continue;
    }
    $gnodes_existing[$gid]->delete();
  }

}

/**
 * Implements hook_views_pre_render().
 */
function iq_group_views_pre_render(\Drupal\views\ViewExecutable $view) {
  if ($view->id() == 'whitepaper_block') {
    $registerForm = \Drupal::formBuilder()->getForm('Drupal\iq_group\Form\RegisterForm');
    // If there is a resource selected (currently whitepaper, later it may vary).
    if (\Drupal::currentUser()->isAnonymous()) {
      if ($view->filter['nid']->value['value'] != NULL) {
        unset($registerForm['preferences']);
        $registerForm['destination']['#value'] = '/node/' .reset($view->filter['nid']->value['value']);
        $destination = '/node/' .reset($view->filter['nid']->value['value']);
      }

      if (!isset($destination)) {
        $destination = \Drupal::service('path.current')->getPath();
      }
      $registerForm['register_link'] = [
        '#type' => 'markup',
        '#markup' => '<a href="/user/register?destination=' . $destination . '">' . t('Register') . '</a> / ',
        '#weight' => 100
      ];
      $registerForm['login_link'] = [
        '#type' => 'markup',
        '#markup' => '<a href="/user/login?destination=' . $destination . '">' . t('Login') . '</a>',
        '#weight' => 100
      ];
      $view->attachment_after = $registerForm;
    }
  }
}

function iq_group_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['forgot_password'] = [
    '#type' => 'markup',
    '#markup' => '<a href="/onetime-loginlink">'. t('Forgot password') . '</a>'
  ];
}

/**
 * Implements hook_node_access().
 *
 */
function iq_group_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Some modules, including the code in \Drupal\node\NodeForm::access() may
  // check for 'view', 'update' or 'delete' access on new nodes, even though
  // that makes little sense. We need to account for it to avoid crashes because
  // we would otherwise query the DB with a non-existent node ID.
  if ($node->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_node:' . $node->bundle();

  // Load all of the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($node);

  // If the node does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }
  if ($op == 'view') {
    foreach ($groups as $group) {
      if ($node->isPublished()) {
        if ($group->hasPermission("view $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
        \Drupal::logger('gnode')->notice('yoo what');
        return AccessResult::allowed();
      }
      \Drupal::logger('gnode')->notice('allowed in group');
    }
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

function iq_group_theme($existing, $type, $theme, $path) {
  $text = '';
  return [
    'signup_template' => [
      'variables' => [
        'EMAIL_TITLE' => "Sign up",
        'EMAIL_PREVIEW_TEXT' => 'Newsletter Sign up',
        'EMAIL_URL' => $text
      ],
    ],
  ];
}